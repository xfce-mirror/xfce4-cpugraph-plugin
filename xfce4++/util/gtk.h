/*
 *  This file is part of Xfce (https://gitlab.xfce.org).
 *
 *  Copyright (c) 2021 Jan Ziak <0xe2.0x9a.0x9b@xfce.org>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#ifndef _XFCE4PP_UTIL_GTK_H_
#define _XFCE4PP_UTIL_GTK_H_

#include <functional>
#include <glib.h>
#include <gtk/gtk.h>

/*
 * This file contains partially type-safe or fully type-safe C++ wrappers to selected GLib and GTK+ C functions.
 * The goal is to improve programming productivity compared to the GLib/GTK+ C interface - even at the cost of
 * compile-time performance, run-time performance, binary code size or memory consumption.
 */

namespace xfce4 {

/*
 * Partially type-safe functions for making signal -> handler connections.
 *
 * Only for signals that do not pass extra arguments to the handler.
 * An example of a signal incompatible with these functions is "response" generated by GtkDialog.
 *
 * If the handler is a C++ λ-function, variables captured by the handler
 * are automatically destroyed (via calling the corresponding C++ destructor)
 * when the object/widget generating the signal gets destroyed.
 */
void connect(GtkColorButton  *widget, const char *signal, const std::function<void(GtkColorButton  *widget)> &handler);
void connect(GtkComboBox     *widget, const char *signal, const std::function<void(GtkComboBox     *widget)> &handler);
void connect(GtkEntry        *widget, const char *signal, const std::function<void(GtkEntry        *widget)> &handler);
void connect(GtkSpinButton   *widget, const char *signal, const std::function<void(GtkSpinButton   *widget)> &handler);
void connect(GtkToggleButton *widget, const char *signal, const std::function<void(GtkToggleButton *widget)> &handler);

/*
 * Fully type-safe functions for making signal -> handler connections.
 *
 * If the handler is a C++ λ-function, variables captured by the handler
 * are automatically destroyed (via calling the corresponding C++ destructor)
 * when the object/widget generating the signal gets destroyed.
 */
void connect_destroy (GtkWidget *widget, const std::function<void(GtkWidget *widget)>                &handler);
void connect_response(GtkDialog *widget, const std::function<void(GtkDialog *widget, gint response)> &handler);

guint timeout_add(guint interval_ms, const std::function<bool()> &handler);

} /* namespace xfce4 */

#endif /* _XFCE4PP_UTIL_GTK_H_ */
